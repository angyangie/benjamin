// alert("start")
var data = []
var format = d3.time.format("%Y-%m")
var format2 = d3.time.format("%m%Y")
var abbrevMonthFormat = d3.time.format("%b")
<% income_statement = IncomeStatement.new(@user, @increment, @start_date, @end_date) %>


// ---rebuilding-----
<% expenses_array = income_statement.parent_category_over_time(Category.find_by(name: "Expenses")) %>
<% income_array = income_statement.parent_category_over_time(Category.find_by(name: "Income")) %>
<% if income_statement.increment == :month %>
  <% income_statement.time_period.each_with_index do |period, idx| %>
    var line_hash = {}
    line_hash["date"] = format2.parse("<%= period.month %>")
    line_hash["exp"] = Math.abs(<%= expenses_array[idx] %>)
    line_hash["inc"] = <%= income_array[idx] %>
    data.push(line_hash)
    console.log(line_hash)
  <% end %>
<% end %>
console.log(data)

$(function() {
  var margin = {top: 20, right: 20, bottom: 30, left: 60},
      width = 720 - margin.left - margin.right,
      height = 360 - margin.top - margin.bottom;

  function make_x_axis() {
    return d3.svg.axis()
        .scale(x)
        .orient('bottom')
        .ticks(data.length)
  }
  function make_y_axis() {
    return d3.svg.axis()
        .scale(y)
        .orient('left')
        .ticks(data.length)
  }

  var x = d3.time.scale()
      .range([0, width]);

  var y = d3.scale.linear()
      .range([height, 0]);

  var xAxis = d3.svg.axis()
      .scale(x)
      .ticks(data.length)
      .tickFormat(function(d, i){
        return abbrevMonthFormat(d)})
      .orient("bottom");

  var yAxis = d3.svg.axis()
      .scale(y)
      .orient("left");

  var expLine = d3.svg.line()
      .x(function(d) { return x(d.date); })
      .y(function(d) { return y(d.exp); });

  var incLine = d3.svg.line()
      .x(function(d) { return x(d.date); })
      .y(function(d) { return y(d.inc); });

  if (d3.selectAll('#line-graph svg')[0].length != 0) {
    d3.select('#line-graph svg').remove()
  }
  var svg = d3.select("#line-graph").append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
    .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    x.domain(d3.extent(data, function(d) { return d.date; }));
    y.domain([
      d3.min(data, function(d) {
        if (d.inc < d.exp){return d.inc - (.2*d.inc)} else {return d.exp - (.2*d.exp)}
    }),
      d3.max(data, function(d) {
        if (d.inc > d.exp){return d.inc + (.2*d.inc)} else {return d.exp + (.2*d.exp)}
    })]);


    svg.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(xAxis);

    svg.append("g")
        .attr("class", "y axis")
        .call(yAxis)
      .append("text")
        // .attr("transform", "rotate(-90)")
        .attr("dy", "1em")
        .attr("dx", 20)
        // .style("text-anchor", "end")
        .text("Dollars ($)");

    svg.append('g')
        .attr('class', 'grid')
        .call(make_y_axis()
          .tickSize(-width,0,0)
          .tickFormat(""))

    svg.append("path")
        .data([data])
        .attr("class", "incomeLine")
        .attr("d", incLine);

    svg.append("path")
        .datum(data)
        .attr("class", "expenseLine")
        .attr("d", expLine);
      })
